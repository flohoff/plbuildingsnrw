#!/usr/bin/perl -w

use utf8;
use strict;
use open ':std', ':encoding(UTF-8)';

use feature 'signatures';
no warnings 'experimental::signatures';

use Mojolicious::Lite;
use URI;
use DBI;
use JSON qw/decode_json/;
use Carp;
use Encode qw/encode_utf8/;
use FindBin qw($Bin);
use lib $FindBin::Bin;
use File::Slurp qw/read_file/;
use Encode;
use POSIX;
use Data::Dumper;


use MultiPolygon;
use ALKISGFK2OSMTags;

my $config;
my $configfile="$Bin/.config.plbuildingsnrw.json";

sub db_open {
	my $dbh=DBI->connect_cached($config->{dbhost}, $config->{dbuser}, $config->{dbpass});

	if (!defined($dbh)) {
		return undef;
	}

	$dbh->{pg_enable_utf8} = 1;
	return $dbh;
}

sub sql_string_build {
	my ($dataset) = @_;

	my $debugcolumns="";
	if ($dataset->{debugcolumns}) {
		$debugcolumns=join(",", @{$dataset->{debugcolumns}}) . ",";
	}

	my $sqlstring=sprintf("select %s
			st_asgeojson(ST_Transform(%s, 4326)) geojson
		from	%s
		where   ST_Intersects(%s,
				ST_Transform(
					ST_SetSRID(
						ST_MakePoint(?, ?),
						4326),
					%s)
				)
		limit 1",
		$debugcolumns,
		$dataset->{geometrycolumn},
		$dataset->{table},
		$dataset->{geometrycolumn},
		$dataset->{srid});

	return $sqlstring
}

sub buildinglevels {
	my ($row, $mp, $value) = @_;
	$mp->{log}->debug(sprintf("Buildinglevels %s", $value));

	my $levels=$row->{$value};

	if (!defined($levels)) {
		return;
	}

	$mp->tags_add({ 'building:levels' => $levels });
}

sub alkisfunktion {
	my ($row, $mp, $value) = @_;

	$mp->{log}->debug(sprintf("Alkisfunktion %s", $value));

	my $funktion=$row->{$value};

	$mp->{log}->debug(sprintf("Funktion %s", $funktion // ""));

	if (!defined($funktion)) {
		return;
	}

	my $tags=ALKISGFK2OSMTags::totag($funktion);

	$mp->tags_add($tags);
}

sub outline_fetch {
	my ($lat, $lon, $datasetname, $debug) = @_;

	my $dataset=$config->{datasets}{$datasetname};

	if (!defined($dataset)) {
		return undef;
	}

	my $dbh=db_open();

	my $sqlstring=sql_string_build($dataset);

	my $sql=$dbh->prepare($sqlstring) or die $DBI::errstr;
	$sql->execute($lon, $lat) or die $DBI::errstr;
	my $row=$sql->fetchrow_hashref();
	$sql->finish();

	if (!defined($row)) {
		return undef;
	}

	my $mp=new MultiPolygon($row);

	foreach my $k ( keys %{$dataset->{postprocess}} ) {
		my $v=$dataset->{postprocess}{$k};

		$mp->{log}->debug("Postprocess $k $v", $k, $v);

		if ($k eq 'alkisfunktion') {
			alkisfunktion($row, $mp, $v);
		} elsif ($k eq 'buildinglevels') {
			buildinglevels($row, $mp, $v);
		}
	}

	$mp->tags_add($dataset->{tags});

	return $mp;
}

sub v3_fetch($self, $datasetname, $debug) {

	my $lat=$self->param("lat");
	my $lon=$self->param("lon");

	if (!defined($lat) || !defined($lon)) {
		return $self->render(template => "parametermissing", format => "html", status => 404);
	}
	
	my $dataset=$config->{datasets}{$datasetname};
	if (!defined($dataset)) {
		return $self->render(data => '<?xml version="1.0"?><osm version="0.6" error="dataset unknown"/>', format => "xml");
	}

	if ($dataset->{type} eq 'database')	{
		my $mp=outline_fetch($lat, $lon, $datasetname, $debug);
		if (defined($mp)) {
			return $self->render(data => $mp->osmxml($debug), format => "xml");
		}
		return $self->render(data => '<?xml version="1.0"?><osm version="0.6" error="nothing found in dataset"/>', format => "xml");
	} elsif ($dataset->{type} eq 'multi') {
		foreach my $dset ( @{$dataset->{list}} ) {
			my $mp=outline_fetch($lat, $lon, $dset, $debug);
			if (defined($mp)) {
				return $self->render(data => $mp->osmxml($debug), format => "xml");
			}
		}
		return $self->render(data => '<?xml version="1.0"?><osm version="0.6" error="nothing found in multi"/>', format => "xml");
	} 

	return $self->render(data => '<?xml version="1.0"?><osm version="0.6" error="dataset type unknown"/>', format => "xml");
}

sub v1_fetch {
	my ($self, $dataset, $debug) = @_;

	my $lat=$self->param("lat");
	my $lon=$self->param("lon");

	if (!defined($lat) || !defined($lon)) {
		return $self->render(template => "parametermissing", format => "html", status => 404);
	}
	
	my $mp=outline_fetch($lat, $lon, $dataset, $debug);

	if (defined($mp)) {
		return $self->render(data => $mp->osmxml($debug), format => "xml");
	}

	return $self->render(data => '<?xml version="1.0"?><osm version="0.6" error="nothing found"/>', format => "xml");
}

# /plbuildingsnrw/v1/?lat=51.75822416981553&lon=18.052758112155754&data_source=bdot&search_distance=3.0
get '/v1' => sub {
	my $self = shift;

	v1_fetch($self, "nrw", 0);
};

get '/v2/debug/' => sub {
	my $self = shift;

	v1_fetch($self, "nrw", 1);
};

get '/v3/:dataset/debug/' => sub {
	my $self = shift;

	my $dataset=$self->param("dataset");

	v1_fetch($self, $dataset, 1);
};

get '/v3/:dataset/' => sub {
	my $self = shift;

	my $dataset=$self->param("dataset");

	v3_fetch($self, $dataset, 0);
};

$config=decode_json(encode_utf8(read_file($configfile)));
app->renderer->default_format('xml');
app->start("fastcgi");

#app->start();

__DATA__
@@ parametermissing.html.ep
Need lat lon
@@ not_found.html.ep
Not found
